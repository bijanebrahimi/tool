#!/usr/bin/env bash
# @virt @virsh @ssh
# echo -e 'ld\nq'|ev

VERSION=''
EVD='/ev'
URI='qemu:///session'
VIRTINST='/usr/bin/virt-install'
VIRSH='/usr/bin/virsh --quiet'
VXML='/usr/bin/virt-xml --quiet'
VIRTBUILDER='/usr/bin/virt-builder'
#bind -x '"\C-r": "source $0"' &> /dev/null


usage() {
  local -A usages=(
    [h | help]='this help'
    [q | quit | exit]='quit'
    [v]='verbose on. enter to disable'
    [u | U]='system | session'
    [l | ls | list]="on | off\n  lists domains/pools/blocks based on where you are"
    [ld]='list domains'
    [lp]='list pools'
    [ln]='list networks'
    [lb]='list blocks'
    [lf]='list interfaces'
    [use | cd]="doing/do_name | domain\n  doing: domain/pool to work on it"
    [i | info]='info'
    [init]='initialize'
    [set]="edit/add options\n  key val1 val2"
    [unset]='disk | iso val  remove'
    [up | on | start]='start a pool or network or a domain'
    [down | off | stop]='stop a pool or network or a domain'
    [term]='terminate'
    [touch]="make volume\n  touch NAME size=[G|M] format=[raw|qcow2]\n  default: size=10G format=raw"
    [rm]='remove volume'
    [cut]="slice disk\n  path must come first\n  cut /PATH/TO/VOLUME loop=\n  default: loop=/dev/loop0"
    [fill]="fill empty cutted disk\n  fill /PATH/TO/VOLUME loop= target= hostname=\n  default: loop=/dev/loop0 target=${EVD}/target hostname=ev"
    [:FUNC]='exec one of the underlying functions directly. empty to list them'
    [/VIRSH_CMD]='exec virsh commands directly. empty to enter virsh shell'
    [!COMMAND]='exec shell commands directly. empty to enter bash shell'
  )

  [[ -z "${1}" ]] && for k in "${!usages[@]}"; do
    echo -e "[$k]\n  ${usages[$k]}\n"
  done || echo -e "[$1]\n  ${usages[$1]}\n"
}


use_what() {
  case "${1}" in
    ..)
      keep_doing="${doing}"
      keep_do_name="${do_name}"
      do_name=''
      ;;
    -)
      if [[ "${doing}" = "${keep_doing}" ]] && \
         [[ "${do_name}" = "${keep_do_name}" ]]; then
        doing="${keeep_doing}"
        do_name="${keeep_do_name}"
      else
        # multiple cd -
        keeep_doing="${doing}"
        keeep_do_name="${do_name}"
        doing="${keep_doing}"
        do_name="${keep_do_name}"
      fi
      ;;
    *)
      a="${1%/*}"
      z="${1#*/}"
      [[ "${a}" = "n" ]] && a='network'
      [[ "${a}" = "p" ]] && a='pool'
      [[ ${a} = ${z} ]] && z=''
      keep_doing="${doing}"
      keep_do_name="${do_name}"
      doing="${a}"
      do_name="${z}"
      # no / will be treated as domain name
      if [[ -n "${a}" ]] && [[ -z "${z}" ]] && [[ "${a}" != 'pool' ]]; then
          doing='domain' && do_name="${a}"
      fi

      # check malformed path
      if [[ "${doing}" != 'domain' ]] && \
         [[ "${doing}" != 'pool' ]] && \
         [[ "${doing}" != 'network' ]] && \
         [[ "${doing}" != '' ]]; then
        echo 'malformed' && doing="${keep_doing}" && do_name="${keep_do_name}"
      fi
      ;;
  esac
}


info_what() {
  case "${doing}" in
    'pool')
      if [[ -z "${do_name}" ]]; then
        echo 'no pool name' && return
      elif [[ -z "${1}" ]]; then
        info_pool "${do_name}"
      else
        info_volume "${1}"
      fi
      ;;
    'network')
      info_network
      ;;
    'domain')
      info_domain
      ;;
    '')
      info_host
      ;;
  esac
}


info_host() {
  cat << EOF
  host: $(hostname -f)
  uri: ${URI}
  cpu: $(grep -c 'processor' /proc/cpuinfo)
  mem: $(free -h | awk '/^Mem:/{print $7,"/",$2}')
  virsh: $(which virsh)
  virt-xml: $(which virt-xml)
  virt-builder: $(which virt-builder)
  virt-resize: $(which virt-resize)
  debootstrap: $(which debootstrap)
  parted: $(which parted)

EOF
}


info_pool() {
  printf 'Path:\t\t'
  ${VIRSH} -c ${URI} pool-dumpxml ${do_name} | awk -F'[><]' '/path/ {print $3}'
  ${VIRSH} -c ${URI} pool-info "${do_name}"
}


info_volume() {
  ${VIRSH} -c ${URI} vol-info "${1}" --pool "${do_name}"
}


info_network() {
  ${VIRSH} -c ${URI} net-info "${do_name}"
}


info_domain() {
  ${VIRSH} -c ${URI} "dominfo ${do_name}; domdisplay ${do_name}"
}


list_what() {
  case "${doing}" in
    'pool')
      if [[ -n "${do_name}" ]]; then
        list_volumes "${1}"
        return
      fi
      list_pools
      ;;
    'network')
      list_networks
      ;;
    *|'domain')
      [[ -n "${do_name}" ]] && list_domain_stuff || list_domains "${1}"
      ;;
  esac
}


# lp
list_pools() {
  LP='${VIRSH} -c ${URI} pool-list ${opts}'
  case "${1}" in
    -1)
      opts='--name --all'
      eval $LP
      ;;
    on)
      opts='--details'
      eval $LP
      ;;
    off)
      opts='--details --inactive'
      eval $LP
      ;;
    '')
      opts='--details --all'
      eval $LP
      ;;
  esac
}


# ln
list_networks() {
  LN='${VIRSH} -c ${URI} net-list ${opts}'
  case "${1}" in
    -1)
      opts='--name --all'
      eval $LN
      ;;
    on)
      opts=''
      eval $LN
      ;;
    off)
      opts='--inactive'
      eval $LN
      ;;
    '')
      opts='--all'
      eval $LN
      ;;
  esac
}


list_volumes() {
  ${VIRSH} -c ${URI} vol-list --pool ${do_name} --details
}


# ld
list_domains() {
  case "${1}" in
    -1)
      ${VIRSH} -c ${URI} list --name --all
      return
      ;;
    on)
      all_or='state-running'
      ;;
    off)
      all_or='state-shutoff'
      ;;
    '')
      all_or='all'
      ;;
    *)
      echo 'on|off'
      return
      ;;
  esac
  ${VIRSH} -c ${URI} list --${all_or}
}


# lb
list_domain_blocks() {
  LB='${VIRSH} -c ${URI} domblklist --details --domain ${do_name}'
  if [[ "${doing}" != 'domain' ]]; then
    for dom in $(list_domains -1); do
      do_name="${dom}"
      echo "${do_name}:"
      eval $LB
      do_name=''
    done
  else
    eval $LB
  fi
}


# lf
list_domain_interfaces() {
  LF='${VIRSH} -c ${URI} domiflist --domain ${do_name}'
  if [[ "${doing}" != 'domain' ]]; then
    for dom in $(list_domains -1); do
      do_name="${dom}"
      echo "${do_name}:"
      eval $LF
      do_name=''
    done
  else
    eval $LF
  fi
}


list_domain_stuff() {
  echo 'blocks:' && list_domain_blocks
  echo 'interfaces:' && list_domain_interfaces
}


init_what() {
  case "${doing}" in
    'pool')
      init_pool "${@}"
      ;;
    'domain')
      init_domain "${@}"
      ;;
    'network')
      init_network "${@}"
      ;;
  esac
}


init_pool() {
  [[ "${doing}" != 'pool' ]] && return
  [[ -z "${1}" ]] && target="${EVD}/domain/${do_name}" || target="${1}"
  mkdir -p "${target}"
  ${VIRSH} -c ${URI} "\
    pool-define-as --name "${do_name}" --type dir --target "${target}"; \
    pool-autostart "${do_name}"; \
    pool-start "${do_name}" \
  "
}


init_network() {
  [[ "${doing}" != 'network' ]] && return
  [[ -z "${1}" ]] && echo 'no bridge name specified' && return
  br_name="${1}"
  temp_define_xml="$(mktemp)"
  echo -e "\
    <network><name>${do_name}</name><forward mode='bridge'/>\
    <bridge name=${br_name}/><virtualport type='openvswitch'/></network>
  " > "${temp_define_xml}"
  ${VIRSH} -c ${URI} net-define "${temp_define_xml}" && \
  rm -f "${temp_define_xml}"
}


init_domain() {
  temp_define_xml="$(mktemp)"
  ${VIRTINST} --print-xml --connect $URI --import --virt-type kvm --cpu host \
              --graphics vnc --memory 128 --name "${do_name}" --network none \
              --disk "${1}" > "${temp_define_xml}" && \
  ${VIRSH} -c ${URI} define --file "${temp_define_xml}" && \
  ${VXML} -c ${URI} ${do_name} --remove-device --input tablet && \
  rm -f "${temp_define_xml}" && \
  echo -e "Domain ${do_name} initiated\n"
}


set_kv() {
  [[ -z ${do_name} ]] && echo 'lots of things' && return
  key="${1}"
  val1="${2}"
  val2="${3}"
  case "${key}" in
    'cpu')
      ${VXML} -c ${URI} ${do_name} --edit \
      --vcpus vcpus="${val1}",maxvcpus="${val2}"
      ;;
    'memory')
      ${VXML} -c ${URI} ${do_name} --edit \
      --memory memory="${val1}",maxmemory="${val2}"
      ;;
    'disk')
      ${VXML} -c ${URI} ${do_name} \
      --add-device --disk "${val1}",bus=virtio
      ;;
    'iso')
      ${VXML} -c ${URI} ${do_name} \
      --add-device --disk "${val1}",bus=ide,format=raw,readonly=true,device=cdrom
      # make it bootable
      ;;
    'nic')
      case ${val1} in
      'nat')
        ${VXML} -c ${URI} ${do_name} \
        --add-device --network type=network,source="${val2}",model=virtio
        ;;
      'bridge')
        ${VXML} -c ${URI} ${do_name} \
        --add-device --network type=bridge,source="${val2}",model=virtio
        ;;
      'ovs')
        ${VXML} -c ${URI} ${do_name} \
        --add-device --network type=bridge,source="${val2}",virtualport_type=openvswitch,model=virtio,driver_name=vhost
        ;;
      '')
        echo 'nat | bridge | ovs'
        ;;
      esac
      ;;
    'boot')
      [[ ${val1} = 'disk' ]] && val1='hd'
      ${VXML} -c ${URI} ${do_name} --edit --boot ${val1}
      ;;
    'path')
      [[ $(is_pool) = 'false' ]] && echo 'only in pool' && return
      ${VIRSH} -c ${URI} pool-edit --pool ${do_name} && down && up
      ;;
    '')
      if [[ "${doing}" = 'domain' ]]; then
          echo "set [cpu | memory] min max"
          echo "set [disk | iso] path"
          echo "set nic [nat | bridge | ovs] [network_name | bridge_name | ovs bridge name]"
          echo -e "set boot [hd | cdrom]\n"
      fi
      if [[ "${doing}" = 'pool' ]]; then
          echo -e "set path address\n"
      fi
      ;;
    *)
      echo -e "invalid key value: ${key} ${val}\n"
      ;;
  esac
}


unset_kv() {
  key="${1}"
  val="${2}"
  case "${key}" in
    'disk'|'iso')
      ${VXML} -c ${URI} ${do_name} --remove-device --disk "${val}"
      ;;
    'nic')
      ${VXML} -c ${URI} ${do_name} --remove-device --network mac="52:54:00:${val}"
      ;;
    '*')
      echo -e "invalid key value: ${key} ${val}\n"
  esac
}


touch_volume() {
  if [[ -z "${1}" ]] || [[ "${1}" =~ '=' ]]; then
    usage 'touch'
    return
  fi
  touch_volume_name=${1}
  touch_volume_size='10G'
  touch_volume_format='raw'
  get_keyvals "${@}"
  ${VIRSH} -c ${URI} vol-create-as \
                       --pool "${do_name}" \
                       --name $touch_volume_name.$touch_volume_format \
                       --capacity $touch_volume_size \
                       --format $touch_volume_format
}


rm_volume() {
  [[ -z "${1}" ]] && echo 'rm NAME' && return
  echo "removing volume: ${1}"
  read -p 'are you sure? (say YES) '
  [[ "${REPLY}" = 'YES' ]] && \
  ${VIRSH} -c ${URI} vol-delete --pool "${do_name}" --vol "${1}"
}


cut_disk() {
  if [[ -z "${1}" ]] || [[ "${1}" =~ '=' ]]; then
    usage 'cut'
    return
  fi
  local cut_disk_loop='/dev/loop0'
  local parted='parted --script'
  get_keyvals "${@}"
  losetup ${cut_disk_loop} "${1}" || return
  losetup
  read -p 'continue? (say YES) '
  if [[ $REPLY != 'YES' ]]; then
    losetup -d ${cut_disk_loop}
    return
  fi

  ${parted} ${cut_disk_loop} mklabel gpt
  ${parted} ${cut_disk_loop} mkpart grub 0% 2m
  ${parted} ${cut_disk_loop} set 1 bios on
  ${parted} ${cut_disk_loop} mkpart os ext4 2m 100%
  partprobe
  mkfs.ext4 -q ${cut_disk_loop}p2
  losetup -d ${cut_disk_loop}
}


fill_volume() {
  if [[ -z "${1}" ]] || [[ "${1}" =~ '=' ]]; then
    usage 'fill'
    return
  fi
  local fill_volume_file="${1}"
  local fill_volume_loop='/dev/loop0'
  local fill_volume_target="${EVD}/target"
  local fill_volume_hostname='ev'
  get_keyvals "${@}"

  provision="
    locale-gen;
    echo ${fill_volume_hostname} >/etc/hostname;
    passwd;
    DEBIAN_FRONTEND=noninteractive \
    apt-get -qq --no-install-recommends install grub-pc >/dev/null&&
    grub-install --target=i386-pc --boot-directory=/boot/ ${loop}&&
    sed -i '/GRUB_TIMEOUT/s/5/0/g' /etc/default/grub&&
    sed -i 's/quiet/console=ttyS0/g' /etc/default/grub&&
    update-grub
  "

  mountp="$(mktemp -d)" || return
  losetup ${fill_volume_loop} ${fill_volume_file} || return
  mount ${fill_volume_loop}p2 ${mountp} && echo 'mount done' || return
  cp -a "${fill_volume_target}"/* "${mountp}"/ && echo 'copy done'
  for i in {dev,proc,sys}; do mount --bind /${i} "${mountp}"/$i; done
  ln -s /proc/mounts "${mountp}"/etc/mtab

  local uuid=$(blkid -o value -s UUID ${fill_volume_loop}p2)
  echo -e "UUID=${uuid} /\text4 errors=remount-ro\t0 1" >"${mountp}"/etc/fstab
  sed -i '/# en_US.UTF-8/s/^#//g' "${mountp}"/etc/locale.gen
  echo 'LANG="en_US.UTF-8"' >"${mountp}"/etc/default/locale
  echo "${provision}" >"${mountp}"/prov
  chroot "${mountp}" /bin/sh -c 'chmod +x /prov && /prov && rm -f /prov'

  sync
  for i in {dev,proc,sys}; do umount "${mountp}"/$i; done
  umount ${mountp} && rmdir ${mountp} && losetup -d ${fill_volume_loop} && echo 'all clean'
}


up() {
  case ${doing} in
    'pool')
      ${VIRSH} -c ${URI} pool-start "${do_name}"
      ;;
    'network')
      ${VIRSH} -c ${URI} net-start "${do_name}"
      ;;
    'domain')
      ${VIRSH} -c ${URI} start "${do_name}"
      ;;
  esac
}


down() {
  case ${doing} in
    'pool')
      ${VIRSH} -c ${URI} pool-destroy "${do_name}"
      ;;
    'network')
      ${VIRSH} -c ${URI} net-destroy "${do_name}"
      ;;
    'domain')
      ${VIRSH} -c ${URI} destroy "${do_name}"
      ;;
  esac
}


term_what()  {
  case "${doing}" in
    'pool')
      if [[ -z "${do_name}" ]]; then
        echo 'no pool name' && return
      else
        term_pool "${1}"
      fi
      ;;
    'domain')
      term_domain "${1}"
      ;;
  esac
}


term_pool() {
  case "${1}" in
    '--yes')
      REPLY='YES'
      ;;
    '')
      echo "terminating pool: ${do_name}"
      read -p 'are you sure? (say YES) '
      ;;
  esac
  [[ "${REPLY}" = 'YES' ]] && \
  ${VIRSH} -c ${URI} "\
    pool-destroy --pool ${do_name}; \
    pool-delete --pool ${do_name}; \
    pool-undefine --pool ${do_name} \
  "
}


term_domain() {
  case "${1}" in
    '--yes')
      REPLY='YES'
      ;;
    '')
      echo "domain ${do_name} volumes:"
      list_domain_blocks "${do_name}"
      read -p 'are you sure? (say YES) '
      ;;
  esac
  [[ "${REPLY}" = 'YES' ]] && \
  ${VIRSH} -c ${URI} "\
    destroy ${do_name}; \
    undefine --domain ${do_name} \
  " 2> /dev/null
}


is_pool() {
  [[ ${doing} = 'pool' ]] && echo 'true' || echo 'false'
}


get_keyvals() {
  for keyval in "${@}"; do
    [[ "${keyval}" =~ '=' ]] && export "${FUNCNAME[1]}_${keyval}"
  done
}


finish() {
  clear
  printf "$ps > "
  (( count++ ))
  [[ $count -ge 3 ]] && printf 'use ctrl-d to quit'
}


main() {
  # trap ctrl-c
  count=0
  trap finish SIGINT

  ps="ev/${URI#qemu:///}/${doing}/${do_name}/"
  while IFS="" read -r -e -p $"$ps > "; do
    #history -n /tmp/.ev_history
    history -s "${REPLY}" 2>&1
    input=($REPLY)

    case "${input}" in
      'q'|'quit'|'exit')
        break
        ;;
      'v')
        set -x
        ;;
      'u')
        URI='qemu:///system'
        ;;
      'U')
        URI='qemu:///session'
        ;;
      'use'|'cd')
        use_what "${input[1]}"
        ;;
      'l'|'ls'|'list')
        list_what "${input[1]}"
        ;;
      'i'|'info')
        info_what "${input[1]}"
        ;;
      'lp')
        list_pools "${input[1]}"
        ;;
      'ln')
        list_networks "${input[1]}"
        ;;
      'ld')
        list_domains
        ;;
      'lb')
        list_domain_blocks
        ;;
      'lf')
        list_domain_interfaces
        ;;
      'touch')
        touch_volume "${input[1]}" "${input[2]}" "${input[3]}"
        ;;
      'rm')
        rm_volume "${input[1]}"
        ;;
      'init')
        init_what "${input[1]}"
        ;;
      'set')
        set_kv "${input[1]}" "${input[2]}" "${input[3]}"
        ;;
      'unset')
        unset_kv "${input[1]}" "${input[2]}"
        ;;
      'up'|'on'|'start')
        up
        ;;
      'down'|'off'|'stop')
        down
        ;;
      'term')
        term_what "${input[1]}"
        ;;
      'fill')
        fill_volume "${input[1]}" "${input[2]}" "${input[3]}" "${input[4]}"
        ;;
      'cut')
        cut_disk "${input[1]}" "${input[2]}"
        ;;
      :*)
        [[ -z "${input[@]#:}" ]] && declare -F | awk '{print $3}' || \
        "${input[@]#:}"
        ;;
      /*)
        ${VIRSH} -c ${URI} "${input[@]#/}"
        ;;
      !*)
        cmd="${input[@]#!}"
        [[ -z "${cmd}" ]] && cmd="cd ${EVD}; bash"
        /usr/bin/env bash -c "${cmd}"
        ;;
      '')
        set +x
        ;;
      \#*)
        ;;
      *|'h'|'help')
        usage | less
        ;;
    esac
    ps="ev/${URI#qemu:///}/${doing}/${do_name}/"

  done
  history -a /tmp/.ev_history
}


# extras
evup() {
  local pkgs=(
    atop htop git screen dnsmasq packer parted qemu-utils qemu-kvm
    libguestfs-tools libvirt-clients libvirt-daemon-system
  )

  mkdir -p "${EVD}"/{domain,iso,share,target,trash} && ev_dirs=1

  read -p 'using ovs br? (yes) '
  if [[ ${REPLY} = 'yes' ]]; then
    packages[-1]+=" openvwitch-switch"
    cat<< EOL >>/tmp/.ovs.xml
<network>
  <name>ovs</name>
  <forward mode='bridge'/>
  <bridge name='ovs-br'/>
  <virtualport type='openvswitch'/>
</network>
EOL
  ${VIRSH} -c ${URI} net-define /tmp/.ovs.xml
  #sudo ovs-vsctl add-br ovs-br && sudo ovs-vsctl add-port ovs-br IF
  fi

  sudo apt update && sudo apt-get --yes --no-install-recommends install $pkgs && \
  ev_packages=1


  #sudo echo "allow br0" >>/etc/qemu/bridge.conf && \
  #sudo ip address flush br0 scope global && \
  #sudo setcap 'cap_ne_admin+ep' /usr/lib/qemu/qemu-bridge-helper
}


doos() {
  release='buster'
  target="${EVD}/target"
  mirror='http://debian.asis.ai/debian/'
  local packages=(openssh-server linux-image-amd64 htop less vim screen git grc
                  xtail less vim mtr-tiny locales
  )

  for i in ${packages[@]}; do pkgs+="$i,"; done
  debootstrap --arch=amd64 --include="$pkgs"sudo \
              --components main,contrib,non-free \
              ${release} "${target}" "${mirror}"
}


convert() {
  qemu-img convert -f raw -O qcow2 ${1} ${2}
  #pool-refresh
}


getin() {
  loop="/dev/loop0"

  open() {
    losetup ${loop} ${1} || return
    mountp="$(mktemp -d -p .)" || return
    mount ${loop}p2 "${mountp}"
    for i in {dev,proc,sys}; do mount --bind /${i} "${mountp}/${i}"; done
  }


  close() {
    for i in {dev,proc,sys}; do umount "${1}/${i}"; done
    umount "${1}"
    rmdir "${1}"
    losetup -d ${loop}
  }


  case ${1} in
    open) open "$2";;
    close) close "$2";;
    *|'') echo 'open | close'
  esac
}


main "$@"
